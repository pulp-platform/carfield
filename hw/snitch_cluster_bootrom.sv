// Copyright 2023 ETH Zurich and University of Bologna.
// Solderpad Hardware License, Version 0.51, see LICENSE for details.
// SPDX-License-Identifier: SHL-0.51
//
// Description: Automatically generated bootrom
//
// Generated by hardware/scripts/generate_bootrom.py

module snitch_cluster_bootrom #(
  /* Automatically generated. DO NOT CHANGE! */
  parameter int unsigned DataWidth = 64,
  parameter int unsigned AddrWidth = 48
) (
  input  logic                 clk_i,
  input  logic                 req_i,
  input  logic [AddrWidth-1:0] addr_i,
  output logic [DataWidth-1:0] rdata_o
);
  localparam int RomSize = 19;
  localparam int AddrBits = RomSize > 1 ? $clog2(RomSize) : 1;

  const logic [RomSize-1:0][DataWidth-1:0] mem = {
    64'h0000000000000000,
    64'hffffffff51000000,
    64'h0000102c00000000,
    64'h0000000078400000,
    64'h0000000078000000,
    64'h0000000000020000,
    64'h5100000000000010,
    64'h0000000200001000,
    64'hffdff06f10500073,
    64'hf1402573fbdff06f,
    64'hff9ff06f00000013,
    64'h1050007300040067,
    64'h0002a40305c2a283,
    64'h0000029700000013,
    64'h0000001310500073,
    64'h3042a073000802b7,
    64'h3044607330046073,
    64'h305290730802a283,
    64'h00000297f1402573
  };

  logic [AddrBits-1:0] addr_q;

  always_ff @(posedge clk_i) begin
    if (req_i) begin
      addr_q <= addr_i[AddrBits-1+3:3];
    end
  end

  // this prevents spurious Xes from propagating into
  // the speculative fetch stage of the core
  assign rdata_o = (addr_q < RomSize) ? mem[addr_q] : '0;
endmodule
