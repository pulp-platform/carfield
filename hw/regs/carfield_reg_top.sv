// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module carfield_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 9
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output carfield_reg_pkg::carfield_reg2hw_t reg2hw, // Write
  input  carfield_reg_pkg::carfield_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import carfield_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] version0_qs;
  logic [31:0] version1_qs;
  logic [31:0] version2_qs;
  logic [31:0] version3_qs;
  logic [31:0] version4_qs;
  logic [31:0] jedec_idcode_qs;
  logic [31:0] jedec_idcode_wd;
  logic jedec_idcode_we;
  logic [31:0] generic_scratch0_qs;
  logic [31:0] generic_scratch0_wd;
  logic generic_scratch0_we;
  logic [31:0] generic_scratch1_qs;
  logic [31:0] generic_scratch1_wd;
  logic generic_scratch1_we;
  logic host_rst_qs;
  logic periph_rst_qs;
  logic periph_rst_wd;
  logic periph_rst_we;
  logic safety_island_rst_qs;
  logic safety_island_rst_wd;
  logic safety_island_rst_we;
  logic security_island_rst_qs;
  logic security_island_rst_wd;
  logic security_island_rst_we;
  logic pulp_cluster_rst_qs;
  logic pulp_cluster_rst_wd;
  logic pulp_cluster_rst_we;
  logic spatz_cluster_rst_qs;
  logic spatz_cluster_rst_wd;
  logic spatz_cluster_rst_we;
  logic l2_rst_qs;
  logic l2_rst_wd;
  logic l2_rst_we;
  logic periph_isolate_qs;
  logic periph_isolate_wd;
  logic periph_isolate_we;
  logic safety_island_isolate_qs;
  logic safety_island_isolate_wd;
  logic safety_island_isolate_we;
  logic security_island_isolate_qs;
  logic security_island_isolate_wd;
  logic security_island_isolate_we;
  logic pulp_cluster_isolate_qs;
  logic pulp_cluster_isolate_wd;
  logic pulp_cluster_isolate_we;
  logic spatz_cluster_isolate_qs;
  logic spatz_cluster_isolate_wd;
  logic spatz_cluster_isolate_we;
  logic l2_isolate_qs;
  logic l2_isolate_wd;
  logic l2_isolate_we;
  logic periph_isolate_status_qs;
  logic periph_isolate_status_wd;
  logic periph_isolate_status_we;
  logic safety_island_isolate_status_qs;
  logic safety_island_isolate_status_wd;
  logic safety_island_isolate_status_we;
  logic security_island_isolate_status_qs;
  logic security_island_isolate_status_wd;
  logic security_island_isolate_status_we;
  logic pulp_cluster_isolate_status_qs;
  logic pulp_cluster_isolate_status_wd;
  logic pulp_cluster_isolate_status_we;
  logic spatz_cluster_isolate_status_qs;
  logic spatz_cluster_isolate_status_wd;
  logic spatz_cluster_isolate_status_we;
  logic l2_isolate_status_qs;
  logic l2_isolate_status_wd;
  logic l2_isolate_status_we;
  logic periph_clk_en_qs;
  logic periph_clk_en_wd;
  logic periph_clk_en_we;
  logic safety_island_clk_en_qs;
  logic safety_island_clk_en_wd;
  logic safety_island_clk_en_we;
  logic security_island_clk_en_qs;
  logic security_island_clk_en_wd;
  logic security_island_clk_en_we;
  logic pulp_cluster_clk_en_qs;
  logic pulp_cluster_clk_en_wd;
  logic pulp_cluster_clk_en_we;
  logic spatz_cluster_clk_en_qs;
  logic spatz_cluster_clk_en_wd;
  logic spatz_cluster_clk_en_we;
  logic l2_clk_en_qs;
  logic l2_clk_en_wd;
  logic l2_clk_en_we;
  logic [1:0] periph_clk_sel_qs;
  logic [1:0] periph_clk_sel_wd;
  logic periph_clk_sel_we;
  logic [1:0] safety_island_clk_sel_qs;
  logic [1:0] safety_island_clk_sel_wd;
  logic safety_island_clk_sel_we;
  logic [1:0] security_island_clk_sel_qs;
  logic [1:0] security_island_clk_sel_wd;
  logic security_island_clk_sel_we;
  logic [1:0] pulp_cluster_clk_sel_qs;
  logic [1:0] pulp_cluster_clk_sel_wd;
  logic pulp_cluster_clk_sel_we;
  logic [1:0] spatz_cluster_clk_sel_qs;
  logic [1:0] spatz_cluster_clk_sel_wd;
  logic spatz_cluster_clk_sel_we;
  logic [1:0] l2_clk_sel_qs;
  logic [1:0] l2_clk_sel_wd;
  logic l2_clk_sel_we;
  logic [23:0] periph_clk_div_value_qs;
  logic [23:0] periph_clk_div_value_wd;
  logic periph_clk_div_value_we;
  logic [23:0] safety_island_clk_div_value_qs;
  logic [23:0] safety_island_clk_div_value_wd;
  logic safety_island_clk_div_value_we;
  logic [23:0] security_island_clk_div_value_qs;
  logic [23:0] security_island_clk_div_value_wd;
  logic security_island_clk_div_value_we;
  logic [23:0] pulp_cluster_clk_div_value_qs;
  logic [23:0] pulp_cluster_clk_div_value_wd;
  logic pulp_cluster_clk_div_value_we;
  logic [23:0] spatz_cluster_clk_div_value_qs;
  logic [23:0] spatz_cluster_clk_div_value_wd;
  logic spatz_cluster_clk_div_value_we;
  logic [23:0] l2_clk_div_value_qs;
  logic [23:0] l2_clk_div_value_wd;
  logic l2_clk_div_value_we;
  logic host_fetch_enable_qs;
  logic safety_island_fetch_enable_qs;
  logic safety_island_fetch_enable_wd;
  logic safety_island_fetch_enable_we;
  logic security_island_fetch_enable_qs;
  logic security_island_fetch_enable_wd;
  logic security_island_fetch_enable_we;
  logic pulp_cluster_fetch_enable_qs;
  logic pulp_cluster_fetch_enable_wd;
  logic pulp_cluster_fetch_enable_we;
  logic [1:0] spatz_cluster_debug_req_qs;
  logic [1:0] spatz_cluster_debug_req_wd;
  logic spatz_cluster_debug_req_we;
  logic [31:0] host_boot_addr_qs;
  logic [31:0] host_boot_addr_wd;
  logic host_boot_addr_we;
  logic [31:0] safety_island_boot_addr_qs;
  logic [31:0] safety_island_boot_addr_wd;
  logic safety_island_boot_addr_we;
  logic [31:0] security_island_boot_addr_qs;
  logic [31:0] security_island_boot_addr_wd;
  logic security_island_boot_addr_we;
  logic [31:0] pulp_cluster_boot_addr_qs;
  logic [31:0] pulp_cluster_boot_addr_wd;
  logic pulp_cluster_boot_addr_we;
  logic [31:0] spatz_cluster_boot_addr_qs;
  logic [31:0] spatz_cluster_boot_addr_wd;
  logic spatz_cluster_boot_addr_we;
  logic pulp_cluster_boot_enable_qs;
  logic pulp_cluster_boot_enable_wd;
  logic pulp_cluster_boot_enable_we;
  logic spatz_cluster_busy_qs;
  logic pulp_cluster_busy_qs;
  logic pulp_cluster_eoc_qs;
  logic eth_rgmii_phy_clk_div_en_qs;
  logic eth_rgmii_phy_clk_div_en_wd;
  logic eth_rgmii_phy_clk_div_en_we;
  logic [19:0] eth_rgmii_phy_clk_div_value_qs;
  logic [19:0] eth_rgmii_phy_clk_div_value_wd;
  logic eth_rgmii_phy_clk_div_value_we;
  logic eth_mdio_clk_div_en_qs;
  logic eth_mdio_clk_div_en_wd;
  logic eth_mdio_clk_div_en_we;
  logic [19:0] eth_mdio_clk_div_value_qs;
  logic [19:0] eth_mdio_clk_div_value_wd;
  logic eth_mdio_clk_div_value_we;
  logic [31:0] dram_aw_delay_qs;
  logic [31:0] dram_aw_delay_wd;
  logic dram_aw_delay_we;
  logic [31:0] dram_w_delay_qs;
  logic [31:0] dram_w_delay_wd;
  logic dram_w_delay_we;
  logic [31:0] dram_b_delay_qs;
  logic [31:0] dram_b_delay_wd;
  logic dram_b_delay_we;
  logic [31:0] dram_ar_delay_qs;
  logic [31:0] dram_ar_delay_wd;
  logic dram_ar_delay_we;
  logic [31:0] dram_r_delay_qs;
  logic [31:0] dram_r_delay_wd;
  logic dram_r_delay_we;

  // Register instances
  // R[version0]: V(False)

  // constant-only read
  assign version0_qs = 32'h0;


  // R[version1]: V(False)

  // constant-only read
  assign version1_qs = 32'h0;


  // R[version2]: V(False)

  // constant-only read
  assign version2_qs = 32'h0;


  // R[version3]: V(False)

  // constant-only read
  assign version3_qs = 32'h0;


  // R[version4]: V(False)

  // constant-only read
  assign version4_qs = 32'h0;


  // R[jedec_idcode]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_jedec_idcode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (jedec_idcode_we),
    .wd     (jedec_idcode_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (jedec_idcode_qs)
  );


  // R[generic_scratch0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_generic_scratch0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (generic_scratch0_we),
    .wd     (generic_scratch0_wd),

    // from internal hardware
    .de     (hw2reg.generic_scratch0.de),
    .d      (hw2reg.generic_scratch0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.generic_scratch0.q ),

    // to register interface (read)
    .qs     (generic_scratch0_qs)
  );


  // R[generic_scratch1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_generic_scratch1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (generic_scratch1_we),
    .wd     (generic_scratch1_wd),

    // from internal hardware
    .de     (hw2reg.generic_scratch1.de),
    .d      (hw2reg.generic_scratch1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.generic_scratch1.q ),

    // to register interface (read)
    .qs     (generic_scratch1_qs)
  );


  // R[host_rst]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_host_rst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_rst.q ),

    // to register interface (read)
    .qs     (host_rst_qs)
  );


  // R[periph_rst]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_rst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_rst_we),
    .wd     (periph_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_rst.q ),

    // to register interface (read)
    .qs     (periph_rst_qs)
  );


  // R[safety_island_rst]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_safety_island_rst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (safety_island_rst_we),
    .wd     (safety_island_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.safety_island_rst.q ),

    // to register interface (read)
    .qs     (safety_island_rst_qs)
  );


  // R[security_island_rst]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_security_island_rst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (security_island_rst_we),
    .wd     (security_island_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.security_island_rst.q ),

    // to register interface (read)
    .qs     (security_island_rst_qs)
  );


  // R[pulp_cluster_rst]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pulp_cluster_rst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pulp_cluster_rst_we),
    .wd     (pulp_cluster_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pulp_cluster_rst.q ),

    // to register interface (read)
    .qs     (pulp_cluster_rst_qs)
  );


  // R[spatz_cluster_rst]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_spatz_cluster_rst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (spatz_cluster_rst_we),
    .wd     (spatz_cluster_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.spatz_cluster_rst.q ),

    // to register interface (read)
    .qs     (spatz_cluster_rst_qs)
  );


  // R[l2_rst]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_l2_rst (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (l2_rst_we),
    .wd     (l2_rst_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.l2_rst.q ),

    // to register interface (read)
    .qs     (l2_rst_qs)
  );


  // R[periph_isolate]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_isolate (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_isolate_we),
    .wd     (periph_isolate_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_isolate.q ),

    // to register interface (read)
    .qs     (periph_isolate_qs)
  );


  // R[safety_island_isolate]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_safety_island_isolate (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (safety_island_isolate_we),
    .wd     (safety_island_isolate_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.safety_island_isolate.q ),

    // to register interface (read)
    .qs     (safety_island_isolate_qs)
  );


  // R[security_island_isolate]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_security_island_isolate (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (security_island_isolate_we),
    .wd     (security_island_isolate_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.security_island_isolate.q ),

    // to register interface (read)
    .qs     (security_island_isolate_qs)
  );


  // R[pulp_cluster_isolate]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_pulp_cluster_isolate (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pulp_cluster_isolate_we),
    .wd     (pulp_cluster_isolate_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pulp_cluster_isolate.q ),

    // to register interface (read)
    .qs     (pulp_cluster_isolate_qs)
  );


  // R[spatz_cluster_isolate]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_spatz_cluster_isolate (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (spatz_cluster_isolate_we),
    .wd     (spatz_cluster_isolate_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.spatz_cluster_isolate.q ),

    // to register interface (read)
    .qs     (spatz_cluster_isolate_qs)
  );


  // R[l2_isolate]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_l2_isolate (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (l2_isolate_we),
    .wd     (l2_isolate_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.l2_isolate.q ),

    // to register interface (read)
    .qs     (l2_isolate_qs)
  );


  // R[periph_isolate_status]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_periph_isolate_status (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_isolate_status_we),
    .wd     (periph_isolate_status_wd),

    // from internal hardware
    .de     (hw2reg.periph_isolate_status.de),
    .d      (hw2reg.periph_isolate_status.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (periph_isolate_status_qs)
  );


  // R[safety_island_isolate_status]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_safety_island_isolate_status (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (safety_island_isolate_status_we),
    .wd     (safety_island_isolate_status_wd),

    // from internal hardware
    .de     (hw2reg.safety_island_isolate_status.de),
    .d      (hw2reg.safety_island_isolate_status.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (safety_island_isolate_status_qs)
  );


  // R[security_island_isolate_status]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_security_island_isolate_status (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (security_island_isolate_status_we),
    .wd     (security_island_isolate_status_wd),

    // from internal hardware
    .de     (hw2reg.security_island_isolate_status.de),
    .d      (hw2reg.security_island_isolate_status.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (security_island_isolate_status_qs)
  );


  // R[pulp_cluster_isolate_status]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pulp_cluster_isolate_status (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pulp_cluster_isolate_status_we),
    .wd     (pulp_cluster_isolate_status_wd),

    // from internal hardware
    .de     (hw2reg.pulp_cluster_isolate_status.de),
    .d      (hw2reg.pulp_cluster_isolate_status.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (pulp_cluster_isolate_status_qs)
  );


  // R[spatz_cluster_isolate_status]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_spatz_cluster_isolate_status (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (spatz_cluster_isolate_status_we),
    .wd     (spatz_cluster_isolate_status_wd),

    // from internal hardware
    .de     (hw2reg.spatz_cluster_isolate_status.de),
    .d      (hw2reg.spatz_cluster_isolate_status.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (spatz_cluster_isolate_status_qs)
  );


  // R[l2_isolate_status]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_l2_isolate_status (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (l2_isolate_status_we),
    .wd     (l2_isolate_status_wd),

    // from internal hardware
    .de     (hw2reg.l2_isolate_status.de),
    .d      (hw2reg.l2_isolate_status.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (l2_isolate_status_qs)
  );


  // R[periph_clk_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_periph_clk_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_clk_en_we),
    .wd     (periph_clk_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_clk_en.q ),

    // to register interface (read)
    .qs     (periph_clk_en_qs)
  );


  // R[safety_island_clk_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_safety_island_clk_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (safety_island_clk_en_we),
    .wd     (safety_island_clk_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.safety_island_clk_en.q ),

    // to register interface (read)
    .qs     (safety_island_clk_en_qs)
  );


  // R[security_island_clk_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_security_island_clk_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (security_island_clk_en_we),
    .wd     (security_island_clk_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.security_island_clk_en.q ),

    // to register interface (read)
    .qs     (security_island_clk_en_qs)
  );


  // R[pulp_cluster_clk_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pulp_cluster_clk_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pulp_cluster_clk_en_we),
    .wd     (pulp_cluster_clk_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pulp_cluster_clk_en.q ),

    // to register interface (read)
    .qs     (pulp_cluster_clk_en_qs)
  );


  // R[spatz_cluster_clk_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_spatz_cluster_clk_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (spatz_cluster_clk_en_we),
    .wd     (spatz_cluster_clk_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.spatz_cluster_clk_en.q ),

    // to register interface (read)
    .qs     (spatz_cluster_clk_en_qs)
  );


  // R[l2_clk_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_l2_clk_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (l2_clk_en_we),
    .wd     (l2_clk_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.l2_clk_en.q ),

    // to register interface (read)
    .qs     (l2_clk_en_qs)
  );


  // R[periph_clk_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h2)
  ) u_periph_clk_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_clk_sel_we),
    .wd     (periph_clk_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.periph_clk_sel.q ),

    // to register interface (read)
    .qs     (periph_clk_sel_qs)
  );


  // R[safety_island_clk_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h1)
  ) u_safety_island_clk_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (safety_island_clk_sel_we),
    .wd     (safety_island_clk_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.safety_island_clk_sel.q ),

    // to register interface (read)
    .qs     (safety_island_clk_sel_qs)
  );


  // R[security_island_clk_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h1)
  ) u_security_island_clk_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (security_island_clk_sel_we),
    .wd     (security_island_clk_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.security_island_clk_sel.q ),

    // to register interface (read)
    .qs     (security_island_clk_sel_qs)
  );


  // R[pulp_cluster_clk_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h1)
  ) u_pulp_cluster_clk_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pulp_cluster_clk_sel_we),
    .wd     (pulp_cluster_clk_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pulp_cluster_clk_sel.q ),

    // to register interface (read)
    .qs     (pulp_cluster_clk_sel_qs)
  );


  // R[spatz_cluster_clk_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h1)
  ) u_spatz_cluster_clk_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (spatz_cluster_clk_sel_we),
    .wd     (spatz_cluster_clk_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.spatz_cluster_clk_sel.q ),

    // to register interface (read)
    .qs     (spatz_cluster_clk_sel_qs)
  );


  // R[l2_clk_sel]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h1)
  ) u_l2_clk_sel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (l2_clk_sel_we),
    .wd     (l2_clk_sel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.l2_clk_sel.q ),

    // to register interface (read)
    .qs     (l2_clk_sel_qs)
  );


  // R[periph_clk_div_value]: V(False)

  prim_subreg #(
    .DW      (24),
    .SWACCESS("RW"),
    .RESVAL  (24'h1)
  ) u_periph_clk_div_value (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (periph_clk_div_value_we),
    .wd     (periph_clk_div_value_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.periph_clk_div_value.qe),
    .q      (reg2hw.periph_clk_div_value.q ),

    // to register interface (read)
    .qs     (periph_clk_div_value_qs)
  );


  // R[safety_island_clk_div_value]: V(False)

  prim_subreg #(
    .DW      (24),
    .SWACCESS("RW"),
    .RESVAL  (24'h1)
  ) u_safety_island_clk_div_value (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (safety_island_clk_div_value_we),
    .wd     (safety_island_clk_div_value_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.safety_island_clk_div_value.qe),
    .q      (reg2hw.safety_island_clk_div_value.q ),

    // to register interface (read)
    .qs     (safety_island_clk_div_value_qs)
  );


  // R[security_island_clk_div_value]: V(False)

  prim_subreg #(
    .DW      (24),
    .SWACCESS("RW"),
    .RESVAL  (24'h1)
  ) u_security_island_clk_div_value (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (security_island_clk_div_value_we),
    .wd     (security_island_clk_div_value_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.security_island_clk_div_value.qe),
    .q      (reg2hw.security_island_clk_div_value.q ),

    // to register interface (read)
    .qs     (security_island_clk_div_value_qs)
  );


  // R[pulp_cluster_clk_div_value]: V(False)

  prim_subreg #(
    .DW      (24),
    .SWACCESS("RW"),
    .RESVAL  (24'h1)
  ) u_pulp_cluster_clk_div_value (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pulp_cluster_clk_div_value_we),
    .wd     (pulp_cluster_clk_div_value_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.pulp_cluster_clk_div_value.qe),
    .q      (reg2hw.pulp_cluster_clk_div_value.q ),

    // to register interface (read)
    .qs     (pulp_cluster_clk_div_value_qs)
  );


  // R[spatz_cluster_clk_div_value]: V(False)

  prim_subreg #(
    .DW      (24),
    .SWACCESS("RW"),
    .RESVAL  (24'h1)
  ) u_spatz_cluster_clk_div_value (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (spatz_cluster_clk_div_value_we),
    .wd     (spatz_cluster_clk_div_value_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.spatz_cluster_clk_div_value.qe),
    .q      (reg2hw.spatz_cluster_clk_div_value.q ),

    // to register interface (read)
    .qs     (spatz_cluster_clk_div_value_qs)
  );


  // R[l2_clk_div_value]: V(False)

  prim_subreg #(
    .DW      (24),
    .SWACCESS("RW"),
    .RESVAL  (24'h1)
  ) u_l2_clk_div_value (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (l2_clk_div_value_we),
    .wd     (l2_clk_div_value_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.l2_clk_div_value.qe),
    .q      (reg2hw.l2_clk_div_value.q ),

    // to register interface (read)
    .qs     (l2_clk_div_value_qs)
  );


  // R[host_fetch_enable]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_host_fetch_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_fetch_enable.q ),

    // to register interface (read)
    .qs     (host_fetch_enable_qs)
  );


  // R[safety_island_fetch_enable]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_safety_island_fetch_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (safety_island_fetch_enable_we),
    .wd     (safety_island_fetch_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.safety_island_fetch_enable.q ),

    // to register interface (read)
    .qs     (safety_island_fetch_enable_qs)
  );


  // R[security_island_fetch_enable]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_security_island_fetch_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (security_island_fetch_enable_we),
    .wd     (security_island_fetch_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.security_island_fetch_enable.q ),

    // to register interface (read)
    .qs     (security_island_fetch_enable_qs)
  );


  // R[pulp_cluster_fetch_enable]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pulp_cluster_fetch_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pulp_cluster_fetch_enable_we),
    .wd     (pulp_cluster_fetch_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pulp_cluster_fetch_enable.q ),

    // to register interface (read)
    .qs     (pulp_cluster_fetch_enable_qs)
  );


  // R[spatz_cluster_debug_req]: V(False)

  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_spatz_cluster_debug_req (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (spatz_cluster_debug_req_we),
    .wd     (spatz_cluster_debug_req_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.spatz_cluster_debug_req.q ),

    // to register interface (read)
    .qs     (spatz_cluster_debug_req_qs)
  );


  // R[host_boot_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h1000)
  ) u_host_boot_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (host_boot_addr_we),
    .wd     (host_boot_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.host_boot_addr.q ),

    // to register interface (read)
    .qs     (host_boot_addr_qs)
  );


  // R[safety_island_boot_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h70000000)
  ) u_safety_island_boot_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (safety_island_boot_addr_we),
    .wd     (safety_island_boot_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.safety_island_boot_addr.q ),

    // to register interface (read)
    .qs     (safety_island_boot_addr_qs)
  );


  // R[security_island_boot_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h70000000)
  ) u_security_island_boot_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (security_island_boot_addr_we),
    .wd     (security_island_boot_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.security_island_boot_addr.q ),

    // to register interface (read)
    .qs     (security_island_boot_addr_qs)
  );


  // R[pulp_cluster_boot_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h70000000)
  ) u_pulp_cluster_boot_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pulp_cluster_boot_addr_we),
    .wd     (pulp_cluster_boot_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pulp_cluster_boot_addr.q ),

    // to register interface (read)
    .qs     (pulp_cluster_boot_addr_qs)
  );


  // R[spatz_cluster_boot_addr]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h70000000)
  ) u_spatz_cluster_boot_addr (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (spatz_cluster_boot_addr_we),
    .wd     (spatz_cluster_boot_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.spatz_cluster_boot_addr.q ),

    // to register interface (read)
    .qs     (spatz_cluster_boot_addr_qs)
  );


  // R[pulp_cluster_boot_enable]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_pulp_cluster_boot_enable (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pulp_cluster_boot_enable_we),
    .wd     (pulp_cluster_boot_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pulp_cluster_boot_enable.q ),

    // to register interface (read)
    .qs     (pulp_cluster_boot_enable_qs)
  );


  // R[spatz_cluster_busy]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_spatz_cluster_busy (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.spatz_cluster_busy.de),
    .d      (hw2reg.spatz_cluster_busy.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.spatz_cluster_busy.q ),

    // to register interface (read)
    .qs     (spatz_cluster_busy_qs)
  );


  // R[pulp_cluster_busy]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_pulp_cluster_busy (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.pulp_cluster_busy.de),
    .d      (hw2reg.pulp_cluster_busy.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pulp_cluster_busy.q ),

    // to register interface (read)
    .qs     (pulp_cluster_busy_qs)
  );


  // R[pulp_cluster_eoc]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RO"),
    .RESVAL  (1'h0)
  ) u_pulp_cluster_eoc (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    .we     (1'b0),
    .wd     ('0  ),

    // from internal hardware
    .de     (hw2reg.pulp_cluster_eoc.de),
    .d      (hw2reg.pulp_cluster_eoc.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pulp_cluster_eoc.q ),

    // to register interface (read)
    .qs     (pulp_cluster_eoc_qs)
  );


  // R[eth_rgmii_phy_clk_div_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_eth_rgmii_phy_clk_div_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (eth_rgmii_phy_clk_div_en_we),
    .wd     (eth_rgmii_phy_clk_div_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.eth_rgmii_phy_clk_div_en.qe),
    .q      (reg2hw.eth_rgmii_phy_clk_div_en.q ),

    // to register interface (read)
    .qs     (eth_rgmii_phy_clk_div_en_qs)
  );


  // R[eth_rgmii_phy_clk_div_value]: V(False)

  prim_subreg #(
    .DW      (20),
    .SWACCESS("RW"),
    .RESVAL  (20'h64)
  ) u_eth_rgmii_phy_clk_div_value (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (eth_rgmii_phy_clk_div_value_we),
    .wd     (eth_rgmii_phy_clk_div_value_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.eth_rgmii_phy_clk_div_value.qe),
    .q      (reg2hw.eth_rgmii_phy_clk_div_value.q ),

    // to register interface (read)
    .qs     (eth_rgmii_phy_clk_div_value_qs)
  );


  // R[eth_mdio_clk_div_en]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_eth_mdio_clk_div_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (eth_mdio_clk_div_en_we),
    .wd     (eth_mdio_clk_div_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.eth_mdio_clk_div_en.qe),
    .q      (reg2hw.eth_mdio_clk_div_en.q ),

    // to register interface (read)
    .qs     (eth_mdio_clk_div_en_qs)
  );


  // R[eth_mdio_clk_div_value]: V(False)

  prim_subreg #(
    .DW      (20),
    .SWACCESS("RW"),
    .RESVAL  (20'h64)
  ) u_eth_mdio_clk_div_value (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (eth_mdio_clk_div_value_we),
    .wd     (eth_mdio_clk_div_value_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (reg2hw.eth_mdio_clk_div_value.qe),
    .q      (reg2hw.eth_mdio_clk_div_value.q ),

    // to register interface (read)
    .qs     (eth_mdio_clk_div_value_qs)
  );


  // R[dram_aw_delay]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_dram_aw_delay (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (dram_aw_delay_we),
    .wd     (dram_aw_delay_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dram_aw_delay.q ),

    // to register interface (read)
    .qs     (dram_aw_delay_qs)
  );


  // R[dram_w_delay]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_dram_w_delay (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (dram_w_delay_we),
    .wd     (dram_w_delay_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dram_w_delay.q ),

    // to register interface (read)
    .qs     (dram_w_delay_qs)
  );


  // R[dram_b_delay]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_dram_b_delay (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (dram_b_delay_we),
    .wd     (dram_b_delay_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dram_b_delay.q ),

    // to register interface (read)
    .qs     (dram_b_delay_qs)
  );


  // R[dram_ar_delay]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_dram_ar_delay (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (dram_ar_delay_we),
    .wd     (dram_ar_delay_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dram_ar_delay.q ),

    // to register interface (read)
    .qs     (dram_ar_delay_qs)
  );


  // R[dram_r_delay]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("RW"),
    .RESVAL  (32'h0)
  ) u_dram_r_delay (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (dram_r_delay_we),
    .wd     (dram_r_delay_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dram_r_delay.q ),

    // to register interface (read)
    .qs     (dram_r_delay_qs)
  );




  logic [67:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == CARFIELD_VERSION0_OFFSET);
    addr_hit[ 1] = (reg_addr == CARFIELD_VERSION1_OFFSET);
    addr_hit[ 2] = (reg_addr == CARFIELD_VERSION2_OFFSET);
    addr_hit[ 3] = (reg_addr == CARFIELD_VERSION3_OFFSET);
    addr_hit[ 4] = (reg_addr == CARFIELD_VERSION4_OFFSET);
    addr_hit[ 5] = (reg_addr == CARFIELD_JEDEC_IDCODE_OFFSET);
    addr_hit[ 6] = (reg_addr == CARFIELD_GENERIC_SCRATCH0_OFFSET);
    addr_hit[ 7] = (reg_addr == CARFIELD_GENERIC_SCRATCH1_OFFSET);
    addr_hit[ 8] = (reg_addr == CARFIELD_HOST_RST_OFFSET);
    addr_hit[ 9] = (reg_addr == CARFIELD_PERIPH_RST_OFFSET);
    addr_hit[10] = (reg_addr == CARFIELD_SAFETY_ISLAND_RST_OFFSET);
    addr_hit[11] = (reg_addr == CARFIELD_SECURITY_ISLAND_RST_OFFSET);
    addr_hit[12] = (reg_addr == CARFIELD_PULP_CLUSTER_RST_OFFSET);
    addr_hit[13] = (reg_addr == CARFIELD_SPATZ_CLUSTER_RST_OFFSET);
    addr_hit[14] = (reg_addr == CARFIELD_L2_RST_OFFSET);
    addr_hit[15] = (reg_addr == CARFIELD_PERIPH_ISOLATE_OFFSET);
    addr_hit[16] = (reg_addr == CARFIELD_SAFETY_ISLAND_ISOLATE_OFFSET);
    addr_hit[17] = (reg_addr == CARFIELD_SECURITY_ISLAND_ISOLATE_OFFSET);
    addr_hit[18] = (reg_addr == CARFIELD_PULP_CLUSTER_ISOLATE_OFFSET);
    addr_hit[19] = (reg_addr == CARFIELD_SPATZ_CLUSTER_ISOLATE_OFFSET);
    addr_hit[20] = (reg_addr == CARFIELD_L2_ISOLATE_OFFSET);
    addr_hit[21] = (reg_addr == CARFIELD_PERIPH_ISOLATE_STATUS_OFFSET);
    addr_hit[22] = (reg_addr == CARFIELD_SAFETY_ISLAND_ISOLATE_STATUS_OFFSET);
    addr_hit[23] = (reg_addr == CARFIELD_SECURITY_ISLAND_ISOLATE_STATUS_OFFSET);
    addr_hit[24] = (reg_addr == CARFIELD_PULP_CLUSTER_ISOLATE_STATUS_OFFSET);
    addr_hit[25] = (reg_addr == CARFIELD_SPATZ_CLUSTER_ISOLATE_STATUS_OFFSET);
    addr_hit[26] = (reg_addr == CARFIELD_L2_ISOLATE_STATUS_OFFSET);
    addr_hit[27] = (reg_addr == CARFIELD_PERIPH_CLK_EN_OFFSET);
    addr_hit[28] = (reg_addr == CARFIELD_SAFETY_ISLAND_CLK_EN_OFFSET);
    addr_hit[29] = (reg_addr == CARFIELD_SECURITY_ISLAND_CLK_EN_OFFSET);
    addr_hit[30] = (reg_addr == CARFIELD_PULP_CLUSTER_CLK_EN_OFFSET);
    addr_hit[31] = (reg_addr == CARFIELD_SPATZ_CLUSTER_CLK_EN_OFFSET);
    addr_hit[32] = (reg_addr == CARFIELD_L2_CLK_EN_OFFSET);
    addr_hit[33] = (reg_addr == CARFIELD_PERIPH_CLK_SEL_OFFSET);
    addr_hit[34] = (reg_addr == CARFIELD_SAFETY_ISLAND_CLK_SEL_OFFSET);
    addr_hit[35] = (reg_addr == CARFIELD_SECURITY_ISLAND_CLK_SEL_OFFSET);
    addr_hit[36] = (reg_addr == CARFIELD_PULP_CLUSTER_CLK_SEL_OFFSET);
    addr_hit[37] = (reg_addr == CARFIELD_SPATZ_CLUSTER_CLK_SEL_OFFSET);
    addr_hit[38] = (reg_addr == CARFIELD_L2_CLK_SEL_OFFSET);
    addr_hit[39] = (reg_addr == CARFIELD_PERIPH_CLK_DIV_VALUE_OFFSET);
    addr_hit[40] = (reg_addr == CARFIELD_SAFETY_ISLAND_CLK_DIV_VALUE_OFFSET);
    addr_hit[41] = (reg_addr == CARFIELD_SECURITY_ISLAND_CLK_DIV_VALUE_OFFSET);
    addr_hit[42] = (reg_addr == CARFIELD_PULP_CLUSTER_CLK_DIV_VALUE_OFFSET);
    addr_hit[43] = (reg_addr == CARFIELD_SPATZ_CLUSTER_CLK_DIV_VALUE_OFFSET);
    addr_hit[44] = (reg_addr == CARFIELD_L2_CLK_DIV_VALUE_OFFSET);
    addr_hit[45] = (reg_addr == CARFIELD_HOST_FETCH_ENABLE_OFFSET);
    addr_hit[46] = (reg_addr == CARFIELD_SAFETY_ISLAND_FETCH_ENABLE_OFFSET);
    addr_hit[47] = (reg_addr == CARFIELD_SECURITY_ISLAND_FETCH_ENABLE_OFFSET);
    addr_hit[48] = (reg_addr == CARFIELD_PULP_CLUSTER_FETCH_ENABLE_OFFSET);
    addr_hit[49] = (reg_addr == CARFIELD_SPATZ_CLUSTER_DEBUG_REQ_OFFSET);
    addr_hit[50] = (reg_addr == CARFIELD_HOST_BOOT_ADDR_OFFSET);
    addr_hit[51] = (reg_addr == CARFIELD_SAFETY_ISLAND_BOOT_ADDR_OFFSET);
    addr_hit[52] = (reg_addr == CARFIELD_SECURITY_ISLAND_BOOT_ADDR_OFFSET);
    addr_hit[53] = (reg_addr == CARFIELD_PULP_CLUSTER_BOOT_ADDR_OFFSET);
    addr_hit[54] = (reg_addr == CARFIELD_SPATZ_CLUSTER_BOOT_ADDR_OFFSET);
    addr_hit[55] = (reg_addr == CARFIELD_PULP_CLUSTER_BOOT_ENABLE_OFFSET);
    addr_hit[56] = (reg_addr == CARFIELD_SPATZ_CLUSTER_BUSY_OFFSET);
    addr_hit[57] = (reg_addr == CARFIELD_PULP_CLUSTER_BUSY_OFFSET);
    addr_hit[58] = (reg_addr == CARFIELD_PULP_CLUSTER_EOC_OFFSET);
    addr_hit[59] = (reg_addr == CARFIELD_ETH_RGMII_PHY_CLK_DIV_EN_OFFSET);
    addr_hit[60] = (reg_addr == CARFIELD_ETH_RGMII_PHY_CLK_DIV_VALUE_OFFSET);
    addr_hit[61] = (reg_addr == CARFIELD_ETH_MDIO_CLK_DIV_EN_OFFSET);
    addr_hit[62] = (reg_addr == CARFIELD_ETH_MDIO_CLK_DIV_VALUE_OFFSET);
    addr_hit[63] = (reg_addr == CARFIELD_DRAM_AW_DELAY_OFFSET);
    addr_hit[64] = (reg_addr == CARFIELD_DRAM_W_DELAY_OFFSET);
    addr_hit[65] = (reg_addr == CARFIELD_DRAM_B_DELAY_OFFSET);
    addr_hit[66] = (reg_addr == CARFIELD_DRAM_AR_DELAY_OFFSET);
    addr_hit[67] = (reg_addr == CARFIELD_DRAM_R_DELAY_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(CARFIELD_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(CARFIELD_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(CARFIELD_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(CARFIELD_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(CARFIELD_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(CARFIELD_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(CARFIELD_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(CARFIELD_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(CARFIELD_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(CARFIELD_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(CARFIELD_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(CARFIELD_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(CARFIELD_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(CARFIELD_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(CARFIELD_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(CARFIELD_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(CARFIELD_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(CARFIELD_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(CARFIELD_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(CARFIELD_PERMIT[19] & ~reg_be))) |
               (addr_hit[20] & (|(CARFIELD_PERMIT[20] & ~reg_be))) |
               (addr_hit[21] & (|(CARFIELD_PERMIT[21] & ~reg_be))) |
               (addr_hit[22] & (|(CARFIELD_PERMIT[22] & ~reg_be))) |
               (addr_hit[23] & (|(CARFIELD_PERMIT[23] & ~reg_be))) |
               (addr_hit[24] & (|(CARFIELD_PERMIT[24] & ~reg_be))) |
               (addr_hit[25] & (|(CARFIELD_PERMIT[25] & ~reg_be))) |
               (addr_hit[26] & (|(CARFIELD_PERMIT[26] & ~reg_be))) |
               (addr_hit[27] & (|(CARFIELD_PERMIT[27] & ~reg_be))) |
               (addr_hit[28] & (|(CARFIELD_PERMIT[28] & ~reg_be))) |
               (addr_hit[29] & (|(CARFIELD_PERMIT[29] & ~reg_be))) |
               (addr_hit[30] & (|(CARFIELD_PERMIT[30] & ~reg_be))) |
               (addr_hit[31] & (|(CARFIELD_PERMIT[31] & ~reg_be))) |
               (addr_hit[32] & (|(CARFIELD_PERMIT[32] & ~reg_be))) |
               (addr_hit[33] & (|(CARFIELD_PERMIT[33] & ~reg_be))) |
               (addr_hit[34] & (|(CARFIELD_PERMIT[34] & ~reg_be))) |
               (addr_hit[35] & (|(CARFIELD_PERMIT[35] & ~reg_be))) |
               (addr_hit[36] & (|(CARFIELD_PERMIT[36] & ~reg_be))) |
               (addr_hit[37] & (|(CARFIELD_PERMIT[37] & ~reg_be))) |
               (addr_hit[38] & (|(CARFIELD_PERMIT[38] & ~reg_be))) |
               (addr_hit[39] & (|(CARFIELD_PERMIT[39] & ~reg_be))) |
               (addr_hit[40] & (|(CARFIELD_PERMIT[40] & ~reg_be))) |
               (addr_hit[41] & (|(CARFIELD_PERMIT[41] & ~reg_be))) |
               (addr_hit[42] & (|(CARFIELD_PERMIT[42] & ~reg_be))) |
               (addr_hit[43] & (|(CARFIELD_PERMIT[43] & ~reg_be))) |
               (addr_hit[44] & (|(CARFIELD_PERMIT[44] & ~reg_be))) |
               (addr_hit[45] & (|(CARFIELD_PERMIT[45] & ~reg_be))) |
               (addr_hit[46] & (|(CARFIELD_PERMIT[46] & ~reg_be))) |
               (addr_hit[47] & (|(CARFIELD_PERMIT[47] & ~reg_be))) |
               (addr_hit[48] & (|(CARFIELD_PERMIT[48] & ~reg_be))) |
               (addr_hit[49] & (|(CARFIELD_PERMIT[49] & ~reg_be))) |
               (addr_hit[50] & (|(CARFIELD_PERMIT[50] & ~reg_be))) |
               (addr_hit[51] & (|(CARFIELD_PERMIT[51] & ~reg_be))) |
               (addr_hit[52] & (|(CARFIELD_PERMIT[52] & ~reg_be))) |
               (addr_hit[53] & (|(CARFIELD_PERMIT[53] & ~reg_be))) |
               (addr_hit[54] & (|(CARFIELD_PERMIT[54] & ~reg_be))) |
               (addr_hit[55] & (|(CARFIELD_PERMIT[55] & ~reg_be))) |
               (addr_hit[56] & (|(CARFIELD_PERMIT[56] & ~reg_be))) |
               (addr_hit[57] & (|(CARFIELD_PERMIT[57] & ~reg_be))) |
               (addr_hit[58] & (|(CARFIELD_PERMIT[58] & ~reg_be))) |
               (addr_hit[59] & (|(CARFIELD_PERMIT[59] & ~reg_be))) |
               (addr_hit[60] & (|(CARFIELD_PERMIT[60] & ~reg_be))) |
               (addr_hit[61] & (|(CARFIELD_PERMIT[61] & ~reg_be))) |
               (addr_hit[62] & (|(CARFIELD_PERMIT[62] & ~reg_be))) |
               (addr_hit[63] & (|(CARFIELD_PERMIT[63] & ~reg_be))) |
               (addr_hit[64] & (|(CARFIELD_PERMIT[64] & ~reg_be))) |
               (addr_hit[65] & (|(CARFIELD_PERMIT[65] & ~reg_be))) |
               (addr_hit[66] & (|(CARFIELD_PERMIT[66] & ~reg_be))) |
               (addr_hit[67] & (|(CARFIELD_PERMIT[67] & ~reg_be)))));
  end

  assign jedec_idcode_we = addr_hit[5] & reg_we & !reg_error;
  assign jedec_idcode_wd = reg_wdata[31:0];

  assign generic_scratch0_we = addr_hit[6] & reg_we & !reg_error;
  assign generic_scratch0_wd = reg_wdata[31:0];

  assign generic_scratch1_we = addr_hit[7] & reg_we & !reg_error;
  assign generic_scratch1_wd = reg_wdata[31:0];

  assign periph_rst_we = addr_hit[9] & reg_we & !reg_error;
  assign periph_rst_wd = reg_wdata[0];

  assign safety_island_rst_we = addr_hit[10] & reg_we & !reg_error;
  assign safety_island_rst_wd = reg_wdata[0];

  assign security_island_rst_we = addr_hit[11] & reg_we & !reg_error;
  assign security_island_rst_wd = reg_wdata[0];

  assign pulp_cluster_rst_we = addr_hit[12] & reg_we & !reg_error;
  assign pulp_cluster_rst_wd = reg_wdata[0];

  assign spatz_cluster_rst_we = addr_hit[13] & reg_we & !reg_error;
  assign spatz_cluster_rst_wd = reg_wdata[0];

  assign l2_rst_we = addr_hit[14] & reg_we & !reg_error;
  assign l2_rst_wd = reg_wdata[0];

  assign periph_isolate_we = addr_hit[15] & reg_we & !reg_error;
  assign periph_isolate_wd = reg_wdata[0];

  assign safety_island_isolate_we = addr_hit[16] & reg_we & !reg_error;
  assign safety_island_isolate_wd = reg_wdata[0];

  assign security_island_isolate_we = addr_hit[17] & reg_we & !reg_error;
  assign security_island_isolate_wd = reg_wdata[0];

  assign pulp_cluster_isolate_we = addr_hit[18] & reg_we & !reg_error;
  assign pulp_cluster_isolate_wd = reg_wdata[0];

  assign spatz_cluster_isolate_we = addr_hit[19] & reg_we & !reg_error;
  assign spatz_cluster_isolate_wd = reg_wdata[0];

  assign l2_isolate_we = addr_hit[20] & reg_we & !reg_error;
  assign l2_isolate_wd = reg_wdata[0];

  assign periph_isolate_status_we = addr_hit[21] & reg_we & !reg_error;
  assign periph_isolate_status_wd = reg_wdata[0];

  assign safety_island_isolate_status_we = addr_hit[22] & reg_we & !reg_error;
  assign safety_island_isolate_status_wd = reg_wdata[0];

  assign security_island_isolate_status_we = addr_hit[23] & reg_we & !reg_error;
  assign security_island_isolate_status_wd = reg_wdata[0];

  assign pulp_cluster_isolate_status_we = addr_hit[24] & reg_we & !reg_error;
  assign pulp_cluster_isolate_status_wd = reg_wdata[0];

  assign spatz_cluster_isolate_status_we = addr_hit[25] & reg_we & !reg_error;
  assign spatz_cluster_isolate_status_wd = reg_wdata[0];

  assign l2_isolate_status_we = addr_hit[26] & reg_we & !reg_error;
  assign l2_isolate_status_wd = reg_wdata[0];

  assign periph_clk_en_we = addr_hit[27] & reg_we & !reg_error;
  assign periph_clk_en_wd = reg_wdata[0];

  assign safety_island_clk_en_we = addr_hit[28] & reg_we & !reg_error;
  assign safety_island_clk_en_wd = reg_wdata[0];

  assign security_island_clk_en_we = addr_hit[29] & reg_we & !reg_error;
  assign security_island_clk_en_wd = reg_wdata[0];

  assign pulp_cluster_clk_en_we = addr_hit[30] & reg_we & !reg_error;
  assign pulp_cluster_clk_en_wd = reg_wdata[0];

  assign spatz_cluster_clk_en_we = addr_hit[31] & reg_we & !reg_error;
  assign spatz_cluster_clk_en_wd = reg_wdata[0];

  assign l2_clk_en_we = addr_hit[32] & reg_we & !reg_error;
  assign l2_clk_en_wd = reg_wdata[0];

  assign periph_clk_sel_we = addr_hit[33] & reg_we & !reg_error;
  assign periph_clk_sel_wd = reg_wdata[1:0];

  assign safety_island_clk_sel_we = addr_hit[34] & reg_we & !reg_error;
  assign safety_island_clk_sel_wd = reg_wdata[1:0];

  assign security_island_clk_sel_we = addr_hit[35] & reg_we & !reg_error;
  assign security_island_clk_sel_wd = reg_wdata[1:0];

  assign pulp_cluster_clk_sel_we = addr_hit[36] & reg_we & !reg_error;
  assign pulp_cluster_clk_sel_wd = reg_wdata[1:0];

  assign spatz_cluster_clk_sel_we = addr_hit[37] & reg_we & !reg_error;
  assign spatz_cluster_clk_sel_wd = reg_wdata[1:0];

  assign l2_clk_sel_we = addr_hit[38] & reg_we & !reg_error;
  assign l2_clk_sel_wd = reg_wdata[1:0];

  assign periph_clk_div_value_we = addr_hit[39] & reg_we & !reg_error;
  assign periph_clk_div_value_wd = reg_wdata[23:0];

  assign safety_island_clk_div_value_we = addr_hit[40] & reg_we & !reg_error;
  assign safety_island_clk_div_value_wd = reg_wdata[23:0];

  assign security_island_clk_div_value_we = addr_hit[41] & reg_we & !reg_error;
  assign security_island_clk_div_value_wd = reg_wdata[23:0];

  assign pulp_cluster_clk_div_value_we = addr_hit[42] & reg_we & !reg_error;
  assign pulp_cluster_clk_div_value_wd = reg_wdata[23:0];

  assign spatz_cluster_clk_div_value_we = addr_hit[43] & reg_we & !reg_error;
  assign spatz_cluster_clk_div_value_wd = reg_wdata[23:0];

  assign l2_clk_div_value_we = addr_hit[44] & reg_we & !reg_error;
  assign l2_clk_div_value_wd = reg_wdata[23:0];

  assign safety_island_fetch_enable_we = addr_hit[46] & reg_we & !reg_error;
  assign safety_island_fetch_enable_wd = reg_wdata[0];

  assign security_island_fetch_enable_we = addr_hit[47] & reg_we & !reg_error;
  assign security_island_fetch_enable_wd = reg_wdata[0];

  assign pulp_cluster_fetch_enable_we = addr_hit[48] & reg_we & !reg_error;
  assign pulp_cluster_fetch_enable_wd = reg_wdata[0];

  assign spatz_cluster_debug_req_we = addr_hit[49] & reg_we & !reg_error;
  assign spatz_cluster_debug_req_wd = reg_wdata[1:0];

  assign host_boot_addr_we = addr_hit[50] & reg_we & !reg_error;
  assign host_boot_addr_wd = reg_wdata[31:0];

  assign safety_island_boot_addr_we = addr_hit[51] & reg_we & !reg_error;
  assign safety_island_boot_addr_wd = reg_wdata[31:0];

  assign security_island_boot_addr_we = addr_hit[52] & reg_we & !reg_error;
  assign security_island_boot_addr_wd = reg_wdata[31:0];

  assign pulp_cluster_boot_addr_we = addr_hit[53] & reg_we & !reg_error;
  assign pulp_cluster_boot_addr_wd = reg_wdata[31:0];

  assign spatz_cluster_boot_addr_we = addr_hit[54] & reg_we & !reg_error;
  assign spatz_cluster_boot_addr_wd = reg_wdata[31:0];

  assign pulp_cluster_boot_enable_we = addr_hit[55] & reg_we & !reg_error;
  assign pulp_cluster_boot_enable_wd = reg_wdata[0];

  assign eth_rgmii_phy_clk_div_en_we = addr_hit[59] & reg_we & !reg_error;
  assign eth_rgmii_phy_clk_div_en_wd = reg_wdata[0];

  assign eth_rgmii_phy_clk_div_value_we = addr_hit[60] & reg_we & !reg_error;
  assign eth_rgmii_phy_clk_div_value_wd = reg_wdata[19:0];

  assign eth_mdio_clk_div_en_we = addr_hit[61] & reg_we & !reg_error;
  assign eth_mdio_clk_div_en_wd = reg_wdata[0];

  assign eth_mdio_clk_div_value_we = addr_hit[62] & reg_we & !reg_error;
  assign eth_mdio_clk_div_value_wd = reg_wdata[19:0];

  assign dram_aw_delay_we = addr_hit[63] & reg_we & !reg_error;
  assign dram_aw_delay_wd = reg_wdata[31:0];

  assign dram_w_delay_we = addr_hit[64] & reg_we & !reg_error;
  assign dram_w_delay_wd = reg_wdata[31:0];

  assign dram_b_delay_we = addr_hit[65] & reg_we & !reg_error;
  assign dram_b_delay_wd = reg_wdata[31:0];

  assign dram_ar_delay_we = addr_hit[66] & reg_we & !reg_error;
  assign dram_ar_delay_wd = reg_wdata[31:0];

  assign dram_r_delay_we = addr_hit[67] & reg_we & !reg_error;
  assign dram_r_delay_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = version0_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = version1_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = version2_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = version3_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = version4_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = jedec_idcode_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = generic_scratch0_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = generic_scratch1_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[0] = host_rst_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[0] = periph_rst_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[0] = safety_island_rst_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[0] = security_island_rst_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[0] = pulp_cluster_rst_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = spatz_cluster_rst_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[0] = l2_rst_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[0] = periph_isolate_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[0] = safety_island_isolate_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[0] = security_island_isolate_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[0] = pulp_cluster_isolate_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[0] = spatz_cluster_isolate_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[0] = l2_isolate_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[0] = periph_isolate_status_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[0] = safety_island_isolate_status_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[0] = security_island_isolate_status_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[0] = pulp_cluster_isolate_status_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[0] = spatz_cluster_isolate_status_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[0] = l2_isolate_status_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[0] = periph_clk_en_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[0] = safety_island_clk_en_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[0] = security_island_clk_en_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[0] = pulp_cluster_clk_en_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[0] = spatz_cluster_clk_en_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[0] = l2_clk_en_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[1:0] = periph_clk_sel_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[1:0] = safety_island_clk_sel_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[1:0] = security_island_clk_sel_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[1:0] = pulp_cluster_clk_sel_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[1:0] = spatz_cluster_clk_sel_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[1:0] = l2_clk_sel_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[23:0] = periph_clk_div_value_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[23:0] = safety_island_clk_div_value_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[23:0] = security_island_clk_div_value_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[23:0] = pulp_cluster_clk_div_value_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[23:0] = spatz_cluster_clk_div_value_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[23:0] = l2_clk_div_value_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[0] = host_fetch_enable_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[0] = safety_island_fetch_enable_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[0] = security_island_fetch_enable_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[0] = pulp_cluster_fetch_enable_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[1:0] = spatz_cluster_debug_req_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[31:0] = host_boot_addr_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[31:0] = safety_island_boot_addr_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[31:0] = security_island_boot_addr_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[31:0] = pulp_cluster_boot_addr_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[31:0] = spatz_cluster_boot_addr_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[0] = pulp_cluster_boot_enable_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[0] = spatz_cluster_busy_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[0] = pulp_cluster_busy_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[0] = pulp_cluster_eoc_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[0] = eth_rgmii_phy_clk_div_en_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[19:0] = eth_rgmii_phy_clk_div_value_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[0] = eth_mdio_clk_div_en_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[19:0] = eth_mdio_clk_div_value_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[31:0] = dram_aw_delay_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[31:0] = dram_w_delay_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[31:0] = dram_b_delay_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[31:0] = dram_ar_delay_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[31:0] = dram_r_delay_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module carfield_reg_top_intf
#(
  parameter int AW = 9,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output carfield_reg_pkg::carfield_reg2hw_t reg2hw, // Write
  input  carfield_reg_pkg::carfield_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  carfield_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


